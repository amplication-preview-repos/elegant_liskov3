/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Visitor as PrismaVisitor,
  VisitLog as PrismaVisitLog,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class VisitorServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.VisitorCountArgs, "select">): Promise<number> {
    return this.prisma.visitor.count(args);
  }

  async visitors<T extends Prisma.VisitorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisitorFindManyArgs>
  ): Promise<PrismaVisitor[]> {
    return this.prisma.visitor.findMany<Prisma.VisitorFindManyArgs>(args);
  }
  async visitor<T extends Prisma.VisitorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisitorFindUniqueArgs>
  ): Promise<PrismaVisitor | null> {
    return this.prisma.visitor.findUnique(args);
  }
  async createVisitor<T extends Prisma.VisitorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisitorCreateArgs>
  ): Promise<PrismaVisitor> {
    return this.prisma.visitor.create<T>(args);
  }
  async updateVisitor<T extends Prisma.VisitorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisitorUpdateArgs>
  ): Promise<PrismaVisitor> {
    return this.prisma.visitor.update<T>(args);
  }
  async deleteVisitor<T extends Prisma.VisitorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisitorDeleteArgs>
  ): Promise<PrismaVisitor> {
    return this.prisma.visitor.delete(args);
  }

  async uploadCapturedImage<T extends Prisma.VisitorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisitorFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaVisitor> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "capturedImage";
    const capturedImage = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.visitor.update({
      where: args.where,

      data: {
        capturedImage: capturedImage as InputJsonValue,
      },
    });
  }

  async downloadCapturedImage<T extends Prisma.VisitorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisitorFindUniqueArgs>
  ): Promise<FileDownload> {
    const { capturedImage } = await this.prisma.visitor.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      capturedImage as unknown as LocalStorageFile
    );
  }

  async deleteCapturedImage<T extends Prisma.VisitorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisitorFindUniqueArgs>
  ): Promise<PrismaVisitor> {
    const { capturedImage } = await this.prisma.visitor.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      capturedImage as unknown as LocalStorageFile
    );

    return await this.prisma.visitor.update({
      where: args.where,

      data: {
        capturedImage: Prisma.DbNull,
      },
    });
  }

  async findVisitLogs(
    parentId: string,
    args: Prisma.VisitLogFindManyArgs
  ): Promise<PrismaVisitLog[]> {
    return this.prisma.visitor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .visitLogs(args);
  }
}
