/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VisitLog } from "./VisitLog";
import { VisitLogCountArgs } from "./VisitLogCountArgs";
import { VisitLogFindManyArgs } from "./VisitLogFindManyArgs";
import { VisitLogFindUniqueArgs } from "./VisitLogFindUniqueArgs";
import { CreateVisitLogArgs } from "./CreateVisitLogArgs";
import { UpdateVisitLogArgs } from "./UpdateVisitLogArgs";
import { DeleteVisitLogArgs } from "./DeleteVisitLogArgs";
import { User } from "../../user/base/User";
import { Visitor } from "../../visitor/base/Visitor";
import { VisitLogService } from "../visitLog.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VisitLog)
export class VisitLogResolverBase {
  constructor(
    protected readonly service: VisitLogService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VisitLog",
    action: "read",
    possession: "any",
  })
  async _visitLogsMeta(
    @graphql.Args() args: VisitLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VisitLog])
  @nestAccessControl.UseRoles({
    resource: "VisitLog",
    action: "read",
    possession: "any",
  })
  async visitLogs(
    @graphql.Args() args: VisitLogFindManyArgs
  ): Promise<VisitLog[]> {
    return this.service.visitLogs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VisitLog, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VisitLog",
    action: "read",
    possession: "own",
  })
  async visitLog(
    @graphql.Args() args: VisitLogFindUniqueArgs
  ): Promise<VisitLog | null> {
    const result = await this.service.visitLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VisitLog)
  @nestAccessControl.UseRoles({
    resource: "VisitLog",
    action: "create",
    possession: "any",
  })
  async createVisitLog(
    @graphql.Args() args: CreateVisitLogArgs
  ): Promise<VisitLog> {
    return await this.service.createVisitLog({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        visitor: args.data.visitor
          ? {
              connect: args.data.visitor,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VisitLog)
  @nestAccessControl.UseRoles({
    resource: "VisitLog",
    action: "update",
    possession: "any",
  })
  async updateVisitLog(
    @graphql.Args() args: UpdateVisitLogArgs
  ): Promise<VisitLog | null> {
    try {
      return await this.service.updateVisitLog({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          visitor: args.data.visitor
            ? {
                connect: args.data.visitor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VisitLog)
  @nestAccessControl.UseRoles({
    resource: "VisitLog",
    action: "delete",
    possession: "any",
  })
  async deleteVisitLog(
    @graphql.Args() args: DeleteVisitLogArgs
  ): Promise<VisitLog | null> {
    try {
      return await this.service.deleteVisitLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: VisitLog): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Visitor, {
    nullable: true,
    name: "visitor",
  })
  @nestAccessControl.UseRoles({
    resource: "Visitor",
    action: "read",
    possession: "any",
  })
  async getVisitor(
    @graphql.Parent() parent: VisitLog
  ): Promise<Visitor | null> {
    const result = await this.service.getVisitor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
