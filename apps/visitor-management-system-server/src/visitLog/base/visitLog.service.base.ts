/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  VisitLog as PrismaVisitLog,
  User as PrismaUser,
  Visitor as PrismaVisitor,
} from "@prisma/client";

export class VisitLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VisitLogCountArgs, "select">): Promise<number> {
    return this.prisma.visitLog.count(args);
  }

  async visitLogs<T extends Prisma.VisitLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisitLogFindManyArgs>
  ): Promise<PrismaVisitLog[]> {
    return this.prisma.visitLog.findMany<Prisma.VisitLogFindManyArgs>(args);
  }
  async visitLog<T extends Prisma.VisitLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisitLogFindUniqueArgs>
  ): Promise<PrismaVisitLog | null> {
    return this.prisma.visitLog.findUnique(args);
  }
  async createVisitLog<T extends Prisma.VisitLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisitLogCreateArgs>
  ): Promise<PrismaVisitLog> {
    return this.prisma.visitLog.create<T>(args);
  }
  async updateVisitLog<T extends Prisma.VisitLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisitLogUpdateArgs>
  ): Promise<PrismaVisitLog> {
    return this.prisma.visitLog.update<T>(args);
  }
  async deleteVisitLog<T extends Prisma.VisitLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisitLogDeleteArgs>
  ): Promise<PrismaVisitLog> {
    return this.prisma.visitLog.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.visitLog
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getVisitor(parentId: string): Promise<PrismaVisitor | null> {
    return this.prisma.visitLog
      .findUnique({
        where: { id: parentId },
      })
      .visitor();
  }
}
